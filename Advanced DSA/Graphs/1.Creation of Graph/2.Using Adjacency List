#include <iostream>
#include <vector>
using namespace std;

void UndirectedUnweighted(int E,vector<vector<int>> &adjList,int n){
    int u,v;
    for(int i=0;i<E;i++){
        cout << "Enter the edges (u, v) where u and v are vertex indices starting from 0 : ";
        cin>>u>>v;
        if(u < n && v < n){
            adjList[u].push_back(v);
            adjList[v].push_back(u);
        }else{
            cout<<"Enter valid vertex indices!!"<<endl;
            --i;
        }
    }
    
    cout<<"Undirected Unweighted Graph : "<<endl;
    for(int i=0;i<adjList.size();i++){
        cout<<i<<" -> ";
        for(int v : adjList[i]){
            cout<<v<<" ";
        }
        cout<<endl;
    }
}

void DirectedUnweighted(int E,vector<vector<int>> &adjList,int n){
    int u,v;
    for(int i=0;i<E;i++){
        cout << "Enter the edges (u, v) where u and v are vertex indices starting from 0 : ";
        cin>>u>>v;
        if(u < n && v < n){
            adjList[u].push_back(v);
        }else{
            cout<<"Enter Valid vertex indices!!"<<endl;
            --i;
        }
    }
    
    cout<<"Directed Unweighted Graph : "<<endl;
    for(int i=0;i<adjList.size();i++){
        cout<<i<<" -> ";
        for(int v : adjList[i]){
            cout<<v<<" ";
        }
        cout<<endl;
    }
}

void UndirectedWeighted(int E,vector<vector<pair<int,int>>> &adjList2,int n){
    int u,v,w;
    for(int i=0;i<E;i++){
         cout << "Enter the edges (u, v, w) where u and v are vertex indices and w is the weight of the edge:";
        cin>>u>>v>>w;
        if(u < n && v < n){
            adjList2[u].push_back({v,w});
            adjList2[v].push_back({u,w});
        }else{
            cout<<"Enter Valid vertex indices!!"<<endl;
            --i;
        }
    }
    
    cout<<"Undirected Weighted Graph : "<<endl;
    for(int i=0;i<adjList2.size();i++){
        cout<<i<<" -> ";
        for(auto v : adjList2[i]){
            cout<<"("<<v.first<<","<<v.second<<")"<<endl;
        }
        cout<<endl;
    }
}

void DirectedWeighted(int E,vector<vector<pair<int,int>>> &adjList2,int n){
    int u,v,w;
    for(int i=0;i<E;i++){
         cout << "Enter the edges (u, v, w) where u and v are vertex indices and w is the weight of the edge:";
        cin>>u>>v>>w;
        if(u < n && v < n){
            adjList2[u].push_back({v,w});
        }else{
            cout<<"Enter Valid vertex indices!!"<<endl;
            --i;
        }
    }
    
    cout<<"Directed Weighted Graph : "<<endl;
    for(int i=0;i<adjList2.size();i++){
        cout<<i<<" -> ";
        for(auto v : adjList2[i]){
            cout<<"("<<v.first<<","<<v.second<<")"<<endl;
        }
        cout<<endl;
    }
}

int main() {
    
    int V,E;
    
    vector<vector<int>> adjList; 
    vector<vector<pair<int,int>>> adjList2;
    
    cout<<"1.Undirected Unweighted\n2.Directed Unweighted\n3.Undirected Weighted\n4.Directed Weighted\n5.Exit\n";
    
    int choice;
    while(true){
        cout<<"Enter Choice : ";
        cin>>choice;
        
        cout<<"Enter Vertices :";
        cin>>V;
        cout<<"Enter Edges :";
        cin>>E;
        adjList.assign(V,vector<int>());
        adjList2.assign(V,vector<pair<int, int>>());
       
       switch(choice){
           case 1:
                UndirectedUnweighted(E,adjList,V);
                break;
           case 2:
                DirectedUnweighted(E,adjList,V);
                break;
           case 3:
                UndirectedWeighted(E,adjList2,V);
                break;
           case 4:
                DirectedWeighted(E,adjList2,V);
                break;
           case 5:
                cout<<"Exiting...";
                return 0;
           default:
                cout<<"Enter Valid Option!!"<<endl;
       }
    }

}
