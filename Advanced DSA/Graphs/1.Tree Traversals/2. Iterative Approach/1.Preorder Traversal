#include <iostream>
#include <stack> // Required for using the stack data structure
using namespace std;

// Definition of the TreeNode class to represent each node in a binary tree
class TreeNode {
    public:
    TreeNode *left;  // Pointer to the left child
    TreeNode *right; // Pointer to the right child
    int value;       // Value stored in the node

    // Constructor to initialize the TreeNode
    TreeNode(int data) {
        left = right = nullptr; // Set left and right child pointers to null
        value = data;           // Assign the value to the node
    }
};

// Function to perform iterative preorder traversal (Root -> Left -> Right)
void Preorder(TreeNode *root) {
    if (root == nullptr) { // If the tree is empty, return immediately
        return;
    }

    stack<TreeNode*> st; // Create a stack to store tree nodes
    st.push(root);       // Push the root node onto the stack

    while (!st.empty()) { // Loop until the stack becomes empty
        TreeNode *current = st.top(); // Get the node at the top of the stack
        st.pop();                     // Remove the node from the stack
        
        cout << current->value << " "; // Process the current node (print its value)

        // Push the right child first so that the left child is processed first
        if (current->right) {
            st.push(current->right);
        }
        if (current->left) {
            st.push(current->left);
        }
    }
}

int main() {
    // Constructing the binary tree
    TreeNode *root = new TreeNode(1);           // Root node with value 1
    root->left = new TreeNode(2);               // Left child of root with value 2
    root->right = new TreeNode(3);              // Right child of root with value 3
    root->left->left = new TreeNode(4);         // Left child of node 2 with value 4
    root->left->right = new TreeNode(5);        // Right child of node 2 with value 5

    // Performing and displaying the preorder traversal
    cout << "\nPreorder Traversal :";
    Preorder(root);

    return 0; // Exit the program
}
