#include<iostream>
#include<vector>
#include<queue>
using namespace std;

void DFS(vector<vector<int>> adjList,int node,vector<int> &ans,vector<bool> &visited){
    
    visited[node] = 1;
    ans.push_back(node);
    
    for(int i=0;i<adjList[node].size();i++){
        if(!visited[adjList[node][i]]){
            DFS(adjList,adjList[node][i],ans,visited);
        }
    }
    
}

int main(){
    int V,E;
    cout<<"Enter number of vertices and edges : ";
    cin>>V>>E;

    vector<vector<int>> adjList(V,vector<int>());

    int u,v;
    for(int i=0;i<E;i++){
        cout << "Enter the edges (u, v) where u and v are vertex indices starting from 0 : ";
        cin>>u>>v;
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
    
    for(auto &v : adjList){
        sort(v.begin(),v.end());
    }
    
    cout<<"Graph : "<<endl;
    for(int i=0;i<adjList.size();i++){
        cout<<i<<" -> ";
        for(int j:adjList[i]){
            cout<<j<<" ";
        }
        cout<<endl;
    }
    
    vector<int> ans;
    vector<bool> visited(V,0);
    
    for(int i=0;i<V;i++){
        if(!visited[i]){
            DFS(adjList,i,ans,visited);
        }
    }
    
    cout<<"DFS of above graph : ";
    for(int i:ans){
        cout<<i<<" ";
    }
    
    return 0;

}
