#include <iostream>
#include <vector>
#include <queue>
#include <tuple>
using namespace std;

class Graph{
    int v;
    vector<vector<pair<int,int>>> adj;
    public:
    Graph(int n){
        v = n;
        adj.resize(v);
    }
    void add(int u,int v,int w){
        adj[u].push_back({v,w});
        adj[v].push_back({u,w});
    }
    
    void primMST(){
        int sum=0;
        vector<bool> vis(v,false);
        priority_queue<tuple<int,int,int>,vector<tuple<int,int,int>>,greater<tuple<int,int,int>>> q;
        vector<tuple<int,int,int>> mst;
        
        q.push({0,0,-1});
        while(!q.empty()){
            int v = get<1>(q.top());
            int w = get<0>(q.top());
            int u = get<2>(q.top());
            q.pop();
            
            if(vis[v]){
                continue;
            }
            vis[v] = true;
            if(u!=-1){
                mst.push_back({u,v,w});
                sum += w;
            }
            for(auto [n,weight]:adj[v]){
                if(!vis[n]){
                    q.push({weight,n,v});
                }
            }
        }
        
        for(auto p:mst){
            cout<<get<0>(p)<<"-"<<get<1>(p)<<"\t"<<get<2>(p)<<endl;;
            
        }
        cout<<"sum : "<<sum<<endl;
    }
};
int main() {
    
    Graph g(4);
    g.add(0, 1, 10);
    g.add(0, 2, 15);
    g.add(0, 3, 30);
    g.add(1, 3, 40);
    g.add(2, 3, 50);
    
   

    g.primMST(); 
    
    return 0;
}
