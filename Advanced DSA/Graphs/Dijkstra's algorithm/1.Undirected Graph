#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

#define INF numeric_limits<int>::max() // Infinity value

// Graph as an adjacency list
class Graph {
    int V; // Number of vertices
    vector<vector<pair<int, int>>> adj; // Adjacency list: (neighbor, weight)

public:
    Graph(int V) {
        this->V = V;
        adj.resize(V);
    }

    // Add edge u -> v with weight w
    void addEdge(int u, int v, int w) {
        adj[u].push_back({v, w});
        adj[v].push_back({u, w}); // For undirected graph
    }

    // Dijkstra's Algorithm: Finds shortest paths from `src`
    void dijkstra(int src) {
        vector<int> dist(V, INF); // Distance array
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;

        // Start from `src`
        dist[src] = 0;
        pq.push({0, src}); // (distance, vertex)

        while (!pq.empty()) {
            int d = pq.top().first;
            int u = pq.top().second;
            pq.pop();

            // If we already found a shorter path, ignore this one
            if (d > dist[u]) continue;

            // Traverse neighbors
            for (auto [v, w] : adj[u]) {
                if (dist[u] + w < dist[v]) {
                    dist[v] = dist[u] + w;
                    pq.push({dist[v], v});
                }
            }
        }

        // Print shortest distances from `src`
        cout << "Vertex   Distance from Source " << src << "\n";
        for (int i = 0; i < V; i++) {
            cout << i << " \t\t " << (dist[i] == INF ? -1 : dist[i]) << "\n";
        }
    }
};

int main() {
    int V = 6; // Number of vertices
    Graph g(V);

    g.addEdge(0, 1, 7);
    g.addEdge(0, 2, 9);
    g.addEdge(0, 5, 14);
    g.addEdge(5, 2, 2);
    g.addEdge(2, 1, 10);
    g.addEdge(5, 4, 9);
    g.addEdge(1, 3, 15);
    g.addEdge(2, 3, 11);
    g.addEdge(4, 3, 6);

    int src = 0; // Starting node
    g.dijkstra(src);

    return 0;
}
