#include <iostream>
#include <queue>
using namespace std;

// Definition of the TreeNode class to represent each node in a binary tree
class TreeNode {
    public:
    TreeNode *left;  // Pointer to the left child
    TreeNode *right; // Pointer to the right child
    int value;       // Value stored in the node

    // Constructor to initialize the TreeNode
    TreeNode(int data) {
        left = right = nullptr; // Initialize left and right child pointers to null
        value = data;           // Assign the given value to the node
    }
};

// Function to perform a level order traversal of a binary tree
void Levelorder(TreeNode* root) {
    // If the tree is empty, return immediately
    if (root == nullptr) {
        return;
    }
    
    // Create a queue to store nodes during traversal
    queue<TreeNode*> q;
    
    // Enqueue the root node to start the traversal
    q.push(root);
    
    // Continue traversing nodes until the queue is empty
    while (!q.empty()) {
        // Retrieve and remove the front node from the queue
        TreeNode* current = q.front();
        q.pop();
        
        // Print the value of the current node
        cout << current->value << " ";
        
        // Enqueue the left child of the current node (if it exists)
        if (current->left) {
            q.push(current->left);
        }
        
        // Enqueue the right child of the current node (if it exists)
        if (current->right) {
            q.push(current->right);
        }
    }
}

int main() {
    // Constructing the binary tree
    TreeNode *root = new TreeNode(1);       // Root node with value 1
    root->left = new TreeNode(2);           // Left child of root with value 2
    root->right = new TreeNode(3);          // Right child of root with value 3
    root->left->left = new TreeNode(4);     // Left child of node 2 with value 4
    root->left->right = new TreeNode(5);    // Right child of node 2 with value 5
    
    // Perform level order traversal and print the node values
    Levelorder(root);

    return 0; // Exit the program
}
