#include <iostream>
#include <queue>
using namespace std;

class Node {
    public:
    Node *left, *right;
    int data;

    Node(int data) {
        left = right = nullptr;
        this->data = data;
    }
};

void levelOrderTraversal(Node* root) {
    if (root == nullptr) {
        cout << "Tree is empty!!\n";
        return;
    }

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        Node* current = q.front();
        q.pop();

        cout << current->data << " ";

        if (current->left) q.push(current->left);
        if (current->right) q.push(current->right);
    }
    cout << endl;
}

Node* findMin(Node* root) {
    while (root->left != NULL)
        root = root->left;
    return root;
}

Node* deleteInBST(Node* root, int key) {
    if (root == NULL) return root;

    if (key < root->data) {
        root->left = deleteInBST(root->left, key);
    } else if (key > root->data) {
        root->right = deleteInBST(root->right, key);
    } else {
        // Found node to delete
        if (root->left == NULL) {
            Node* temp = root->right;
            delete root;
            return temp;
        }
        else if (root->right == NULL) {
            Node* temp = root->left;
            delete root;
            return temp;
        }
        // Node with 2 children
        Node* temp = findMin(root->right);
        root->data = temp->data;
        root->right = deleteInBST(root->right, temp->data);
    }

    return root;
}


int main() {
    Node *root = new Node(10);
    root->left = new Node(5);
    root->right = new Node(17);
    root->left->left = new Node(4);
    root->left->right = new Node(6);

   
   root = deleteInBST(root,6);
   
   levelOrderTraversal(root);

    return 0;
}
