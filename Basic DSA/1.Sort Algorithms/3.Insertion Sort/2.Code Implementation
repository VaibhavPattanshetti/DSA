// Program to perform Insertion Sort
// Time Complexity -> 
//                    Best Case: O(n)
//                    Average Case: O(n²)
//                    Worst Case: O(n²)
// Space Complexity -> O(1)

#include <iostream>
using namespace std;

// Function to perform Insertion Sort
void InserctionSort(int arr[], int n) {
    // Traverse the array starting from the second element
    for (int i = 1; i < n; i++) {
        int j = i - 1;        // Initialize `j` to the previous index
        int current = arr[i]; // Store the current element to be placed

        // Shift elements of the sorted part of the array
        // to the right until the correct position for `current` is found
        while (j >= 0 && arr[j] > current) {
            arr[j + 1] = arr[j]; // Move the element one position to the right
            j--;                 // Move to the previous index
        }
        arr[j + 1] = current; // Place the `current` element in its correct position
    }
}

int main() {
    int n;
    // Input the size of the array
    cout << "Enter size of an array: ";
    cin >> n;
    
    int arr[n];
    // Input the elements of the array
    cout << "\nEnter array elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    // Print the original array
    cout << "\nOriginal array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }
    
    // Call the Insertion Sort function
    InserctionSort(arr, n);
    
    // Print the sorted array
    cout << "\nSorted array: ";
    for (int i = 0; i < n; i++) {
        cout << arr[i] << " ";
    }

    return 0; // Indicate that the program ended successfully
}
