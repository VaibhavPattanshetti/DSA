Explanation :
Shell Sort is an in-place sorting algorithm that is an improvement over Insertion Sort. It works by sorting elements that are far apart from
each other and then gradually reducing the gap between them.

#How It Works:
1.Start with large gaps:
• The idea is to take elements that are far apart and sort them. Instead of comparing and swapping adjacent elements (as in Insertion Sort), 
  we start by comparing elements that are far apart from each other.
2.Reduce the gap:
• We start with a large gap between elements, then gradually reduce the gap in each iteration, and repeat the process.
3.Use Insertion Sort for each gap:
• For each gap, perform a modified Insertion Sort. In this modified version, instead of inserting an element into the sorted part of the array,
  we are comparing and sorting elements that are gap positions apart.
4.Repeat the process:
• As the gap gets smaller, the array becomes more sorted, and finally, when the gap is 1, it is just a regular Insertion Sort. By this time,
  most of the elements will already be in the correct positions, and fewer shifts will be needed.

#Step-by-Step Example:
Let’s say we have the following array:
[5, 3, 8, 6, 2]

1.First gap: Let’s start with a gap of 3 (which is n/2, where n is the number of elements).
• Compare elements that are 3 positions apart (e.g., compare 5 and 6, 3 and 2).
• After this step, some elements will have moved into better positions.
2.Second gap: Reduce the gap to 1 (now the gap is the same as the standard Insertion Sort).
• Now perform the normal Insertion Sort for the remaining unsorted elements.
3.Final result: By the time the gap reaches 1, the array is mostly sorted, and the final pass is just to do the last bit of sorting.

#Key Points:
1.Best Case: The array is already sorted, and the algorithm completes quickly. 
Time complexity: O(n log n).
2.Worst Case: The array is in reverse order, and the algorithm performs more comparisons. 
Time complexity: O(n²).
3.Space Complexity: O(1) since it is an in-place sorting algorithm.

#Why Shell Sort is Faster than Insertion Sort:
In Insertion Sort, each element is compared with all previous elements one by one. This results in a lot of shifts.
Shell Sort improves this by sorting elements that are far apart first, which helps to bring elements closer to their final positions faster.
This reduces the number of shifts needed.
Summary:
Shell Sort is a more efficient version of Insertion Sort, especially for large datasets. It reduces the number of movements by sorting elements
at increasing intervals (gaps) and gradually reduces the gap, making the array more sorted before performing the final pass with a gap of 1.
