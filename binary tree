#include <iostream>
#include <queue>
using namespace std;

// Define the structure for a tree node
struct Node {
    int data;       // Data of the node
    Node* left;     // Pointer to the left child
    Node* right;    // Pointer to the right child
    
    // Constructor to create a new node
    Node(int value) {
        data = value;
        left = right = nullptr;  // Initially, the children are NULL
    }
};

// Insert function for a normal binary tree (level-order)
void insert(Node*& root, int data) {
    if (root == nullptr) {
        root = new Node(data);  // Create a new node if the root is null
        return;
    }
    
    queue<Node*> q;
    q.push(root);
    
    // Level-order insertion using a queue
    while (!q.empty()) {
        Node* current = q.front();
        q.pop();
        
        // Insert into the left child if it's available
        if (current->left == nullptr) {
            current->left = new Node(data);
            return;
        } else {
            q.push(current->left);
        }
        
        // Insert into the right child if it's available
        if (current->right == nullptr) {
            current->right = new Node(data);
            return;
        } else {
            q.push(current->right);
        }
    }
}

// Function to print the tree in a visually readable format
void printTree(Node* root) {
    if (root == nullptr) return;
    
    queue<Node*> q;
    q.push(root);
    
    while (!q.empty()) {
        Node* current = q.front();
        q.pop();
        
        if (current != nullptr) {
            cout << current->data << " ";
            q.push(current->left);
            q.push(current->right);
        } else {
            cout << "null ";
        }
    }
    cout << endl;
}

// Main function
int main() {
    Node* root = nullptr;  // Initially, the tree is empty

    // Insert numbers 1, 2, 3, 4, 5, 6, 7, 8, 9 into the binary tree
    int values[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
    for (int val : values) {
        insert(root, val);
    }

    // Print the tree structure in level-order format
    cout << "Binary Tree (level-order): ";
    printTree(root);
    
    return 0;
}
