#include<iostream>
#include<stack>
using namespace std;

class TreeNode{
    public:
    int data;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int n){
        data = n;
        left = nullptr;
        right = nullptr;
    }
    
};

void postorderTraversal(TreeNode *root){
    if(root == nullptr){
        return;
    }

    postorderTraversal(root->left);
    
    
    postorderTraversal(root->right);
    

    cout<<root->data<<" ";

}

void preorderTraversal(TreeNode *root){
    if(root == nullptr){
        return;
    }

    cout<<root->data<<" ";

    preorderTraversal(root->left);
    
    
    preorderTraversal(root->right);
    

}

void inorderTraversal(TreeNode *root){
    if(root == nullptr){
        return;
    }


    inorderTraversal(root->left);
    
    cout<<root->data<<" ";

    inorderTraversal(root->right);
    

}


int main(){
    TreeNode* root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);

    cout << "\nPostorder Traversal: ";
    postorderTraversal(root); // Output: 4 5 2 3 1

    cout << "\nPreorder Traversal: ";
    preorderTraversal(root); // Output: 1 2 4 5 3

    cout << "\ninorder Traversal: ";
    inorderTraversal(root); // Output: 4 2 5 1 3

    return 0;
}
